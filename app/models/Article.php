<?php

namespace app\models;

use kartik\markdown\Markdown;
use voskobovich\behaviors\ManyToManyBehavior;
use yii\base\Arrayable;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "simp_article".
 *
 * @property integer     $id
 * @property integer     $category_id
 * @property string      $title
 * @property string      $content
 * @property integer     $type_id
 * @property Category    $category
 * @property ArticleType $type
 * @property mixed       tag_ids
 */
class Article extends \yii\db\ActiveRecord implements Arrayable
{
    public $content_html;
    public $tags_map;
    
    public static function findByCategory($categoryId)
    {
        return self::find()->where(['category_id' => $categoryId])->all();
    }
    
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }
    
    public function toArray(array $fields = [], array $expand = [], $recursive = TRUE)
    {
        return array_merge(parent::toArray(), ['content_html' => $this->content_html, 'tags_map' => $this->getTagsMap()]);
    }
    
    public function getTagsMap()
    {
        return ArrayHelper::map($this->tags, 'id', 'title');
    }
    
    public function behaviors()
    {
        return [
            [
                'class'     => ManyToManyBehavior::className(),
                'relations' => [
                    'tag_ids' => 'tags',
                ],
            ],
        ];
    }
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'simp_article';
    }
    
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category_id'], 'required'],
            [['category_id', 'type_id'], 'integer'],
            [['content'], 'string'],
            [['description'], 'string', 'max' => 255],
            [['tag_ids'], 'each', 'rule' => ['safe']],
            [['title'], 'string', 'max' => 40],
            [['category_id'], 'exist', 'skipOnError' => TRUE, 'targetClass' => Category::className(), 'targetAttribute' => ['category_id' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => TRUE, 'targetClass' => ArticleType::className(), 'targetAttribute' => ['type_id' => 'id']],
        ];
    }
    
    public function afterFind()
    {
        $this->content_html = Markdown::convert($this->content);
        parent::afterFind();
    }
    
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'          => 'ID',
            'category_id' => 'Category',
            'title'       => 'Title',
            'content'     => 'Content',
            'type_id'     => 'Type',
            'tag_ids'     => 'Tags',
        ];
    }
    
    public function beforeSave($insert)
    {
        $this->tagIdsToInt();
        $this->addNewTags();
        return parent::beforeSave($insert);
    }
    
    private function tagIdsToInt()
    {
        $tagIds = $this->tag_ids;
        foreach ($tagIds as $key => $tagValue) {
            if ($tagKey = intval($tagValue)) {
                $tagIds[$key] = $tagKey;
            }
        }
        $this->tag_ids = $tagIds;
    }
    
    private function addNewTags()
    {
        $tagIds = $this->tag_ids;
        
        
        foreach ($tagIds as $key => $tagValue) {
            if (is_string($tagValue)) {
                $tag = new Tag();
                $tag->title = $tagValue;
                $tag->save();
                
                $tagIds[$key] = $tag->id;
            }
        }
        $this->tag_ids = $tagIds;
    }
    
    public function beforeValidate()
    {
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('{{%article_tags}}', ['article_id' => 'id']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(ArticleType::className(), ['id' => 'type_id']);
    }
    
}
